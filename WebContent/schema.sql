-- MySQL Script generated by MySQL Workbench
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema fightclub
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `fightclub` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `fightclub` ;

-- -----------------------------------------------------
-- Table `fightclub`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fightclub`.`cliente` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(64) NOT NULL,
  `email` VARCHAR(128) NOT NULL,
  `telefone` VARCHAR(16) NOT NULL,
  `empresa` VARCHAR(128) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `fightclub`.`administrador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fightclub`.`administrador` (
  `login` VARCHAR(64) NOT NULL,
  `senha` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`login`))
ENGINE = InnoDB;


-- SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

/***************
** PROCEDURES **
***************/

/* PROCEDURES PARA CLIENTE*/
-- INSERT
DELIMITER $$

CREATE PROCEDURE clienteInsert
(
	IN clienteNome VARCHAR(64),
    IN clienteEmail VARCHAR(128),
    IN clienteTelefone VARCHAR(16),
    IN clienteEmpresa VARCHAR(128)
)
BEGIN
    
    /* exceções que serão retornadas */
    DECLARE nomeInvalido CONDITION FOR SQLSTATE '45001';
    DECLARE emailInvalido CONDITION FOR SQLSTATE '45002';
    DECLARE telefoneInvalido CONDITION FOR SQLSTATE '45003';
    
    /* verifica conteúdo de campos NOT NULL */
    IF clienteNome IS NULL OR clienteNome = '' THEN
		SIGNAL SQLSTATE '45001'
			SET MESSAGE_TEXT = 'Nome do cliente não pode ser nulo.';
	END IF;
    
    IF clienteEmail IS NULL OR clienteEmail = '' THEN
		SIGNAL SQLSTATE '45002'
			SET MESSAGE_TEXT = 'E-mail do cliente não pode ser nulo.';
	END IF;
    
    IF clienteTelefone IS NULL OR clienteTelefone = '' THEN
		SIGNAL SQLSTATE '45003'
			SET MESSAGE_TEXT = 'Telefone do cliente não pode ser nulo.';
	END IF;
    
    /* insert principal */
    PREPARE stmt
		FROM 'INSERT INTO fightclub.CLIENTE (nome, email, telefone, empresa) 
			VALUES (?, ?, ?, ?)';
	SET @nome = clienteNome;
    SET @email = clienteEmail;
    SET @telefone = clienteTelefone;
    SET @empresa = clienteEmpresa;
    
    EXECUTE stmt USING @nome, @email, @telefone, @empresa;
    
    DEALLOCATE PREPARE stmt;
    
    COMMIT;
    
END $$

DELIMITER ;

-- UPDATE
DELIMITER $$

CREATE PROCEDURE clienteUpdate
(
	IN clienteId INT,
	IN clienteNome VARCHAR(64),
    IN clienteEmail VARCHAR(128),
    IN clienteTelefone VARCHAR(16),
    IN clienteEmpresa VARCHAR(128)
)
BEGIN
	
	/* variável para checagem de existência do registro */
    DECLARE clienteCount TINYINT(1);
    
    /* exceções que serão retornadas */
    DECLARE idInvalido CONDITION FOR SQLSTATE '45000';
    DECLARE nomeInvalido CONDITION FOR SQLSTATE '45001';
    DECLARE emailInvalido CONDITION FOR SQLSTATE '45002';
    DECLARE telefoneInvalido CONDITION FOR SQLSTATE '45003';
    DECLARE registroInexistente CONDITION FOR SQLSTATE '45100';
    
    /* verifica se o id recebido é valido */
    IF clienteId <= 0 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'ID do cliente inválido.';
	END IF;
	
    /* verifica se o registro existe */
    SELECT COUNT(*) INTO clienteCount
    FROM fightclub.cliente
    WHERE id = clienteId;
    
    IF clienteCount = 0 THEN
		SIGNAL SQLSTATE '45100'
			SET MESSAGE_TEXT = 'Cliente não encontrado.';
	END IF;
    
    /* verifica conteúdo de campos NOT NULL */
    IF clienteNome IS NULL OR clienteNome = '' THEN
		SIGNAL SQLSTATE '45001'
			SET MESSAGE_TEXT = 'Nome do cliente não pode ser nulo.';
	END IF;
    
    IF clienteEmail IS NULL OR clienteEmail = '' THEN
		SIGNAL SQLSTATE '45002'
			SET MESSAGE_TEXT = 'E-mail do cliente não pode ser nulo.';
	END IF;
    
    IF clienteTelefone IS NULL OR clienteTelefone = '' THEN
		SIGNAL SQLSTATE '45003'
			SET MESSAGE_TEXT = 'Telefone do cliente não pode ser nulo.';
	END IF;
    
    /* update principal */
    PREPARE stmt
		FROM 'UPDATE fightclub.CLIENTE
            SET nome=?, email=?, telefone=?, empresa=?
            WHERE id=?';
    SET @id = clienteId;
	SET @nome = clienteNome;
    SET @email = clienteEmail;
    SET @telefone = clienteTelefone;
    SET @empresa = clienteEmpresa;
    
    EXECUTE stmt USING @nome, @email, @telefone, @empresa, @id;
    
    DEALLOCATE PREPARE stmt;
    
    COMMIT;
    
END $$

DELIMITER ;

-- DELETE
DELIMITER $$

CREATE PROCEDURE clienteDelete
(
	IN clienteId INT
)
BEGIN
	
    /* variável para checagem de existência do registro */
    DECLARE clienteCount TINYINT(1);
    
    /* exceções que serão retornadas */
    DECLARE idInvalido CONDITION FOR SQLSTATE '45000';
    DECLARE registroInexistente CONDITION FOR SQLSTATE '45100';
    
    /* verifica se o id recebido é valido */
    IF clienteId <= 0 THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'ID do cliente inválido.';
	END IF;
	
    /* verifica se o registro existe */
    SELECT COUNT(*) INTO clienteCount
    FROM fightclub.cliente
    WHERE id = clienteId;
    
    IF clienteCount = 0 THEN
		SIGNAL SQLSTATE '45100'
			SET MESSAGE_TEXT = 'Cliente não encontrado.';
	END IF;
    
    /* delete principal */
    PREPARE stmt
		FROM 'DELETE FROM fightclub.CLIENTE
            WHERE id=?';
    SET @id = clienteId;
    
    EXECUTE stmt USING @id;
    
    DEALLOCATE PREPARE stmt;
    
    
    
    COMMIT;
    
END $$

DELIMITER ;

/* PROCEDURES PARA ADMINISTRADOR */
-- INSERT
DELIMITER $$

CREATE PROCEDURE administradorInsert
(
	IN adminLogin VARCHAR(64),
    IN adminSenha VARCHAR(64)
)
BEGIN
	
	/* variável para checagem de existência do registro */
    DECLARE adminCount TINYINT(1);
    
	/* exceções que serão retornadas */
    DECLARE loginInvalido CONDITION FOR SQLSTATE '45001';
    DECLARE senhaInvalido CONDITION FOR SQLSTATE '45002';
    DECLARE chaveDuplicada CONDITION FOR SQLSTATE '45101';
    
    /* verifica conteúdo de campos NOT NULL */
    IF adminLogin IS NULL OR adminLogin = '' THEN
		SIGNAL SQLSTATE '45001'
			SET MESSAGE_TEXT = 'Login do Administrador não pode ser nulo.';
	END IF;
    
    IF adminSenha IS NULL OR adminSenha = '' THEN
		SIGNAL SQLSTATE '45002'
			SET MESSAGE_TEXT = 'Senha do Administrador não pode ser nulo.';
	END IF;
    
    /* verifica chave duplicada */
    SELECT COUNT(*) INTO adminCount
    FROM fightclub.administrador
    WHERE login = adminLogin;
    
    IF adminCount = 1 THEN
		SIGNAL SQLSTATE '45101'
			SET MESSAGE_TEXT = 'Já existe um Administrador com este login!';
	END IF;
    
    /* insert principal */
    PREPARE stmt
		FROM 'INSERT INTO fightclub.ADMINISTRADOR (login, senha)
    VALUES (?, ?)';
    SET @login = adminLogin;
	SET @senha = adminSenha;
    
    EXECUTE stmt USING @login, @senha;
    
    DEALLOCATE PREPARE stmt;
    
    COMMIT;
    
END $$

DELIMITER ;

-- UPDATE
DELIMITER $$

CREATE PROCEDURE administradorUpdate
(
	IN adminLogin VARCHAR(64),
	IN adminSenha VARCHAR(64)
)
BEGIN
    
	/* variável para checagem de existência do registro */
    DECLARE adminCount TINYINT(1);
    
    /* exceções que serão retornadas */
    DECLARE loginInvalido CONDITION FOR SQLSTATE '45000';
    DECLARE senhaInvalido CONDITION FOR SQLSTATE '45001';
    
    /* verifica conteúdo de campos NOT NULL */
    IF adminLogin IS NULL OR adminLogin = '' THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Login do Administrador não pode ser nulo.';
	END IF;
    
    IF adminSenha IS NULL OR adminSenha = '' THEN
		SIGNAL SQLSTATE '45001'
			SET MESSAGE_TEXT = 'Senha do Administrador não pode ser nulo.';
	END IF;
	
    /* verifica se o registro existe */
    SELECT COUNT(*) INTO adminCount
    FROM fightclub.administrador
    WHERE login = adminLogin;
    
    IF adminCount = 0 THEN
		SIGNAL SQLSTATE '45100'
			SET MESSAGE_TEXT = 'Administrador não encontrado.';
	END IF;
    
    /* update principal */
    PREPARE stmt
		FROM 'UPDATE fightclub.ADMINISTRADOR
			SET senha=?
            WHERE login=?';
	SET @senha = adminSenha;
    SET @login = adminLogin;
    
    EXECUTE stmt USING @senha, @login;
    
    DEALLOCATE PREPARE stmt;
    
    COMMIT;
    
END $$

DELIMITER ;

-- DELETE
DELIMITER $$

CREATE PROCEDURE administradorDelete
(
	IN adminLogin VARCHAR(64)
)
BEGIN

	/* variável para checagem de existência do registro */
    DECLARE adminCount TINYINT(1);
    
    /* exceções que serão retornadas */
    DECLARE idInvalido CONDITION FOR SQLSTATE '45000';
    DECLARE registroInexistente CONDITION FOR SQLSTATE '45100';
    
    /* verifica se o id recebido é valido */
    IF adminLogin IS NULL OR adminLogin = '' THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Login do Administrador inválido.';
	END IF;
	
    /* verifica se o registro existe */
    SELECT COUNT(*) INTO adminCount
    FROM fightclub.administrador
    WHERE login = adminLogin;
    
    IF adminCount = 0 THEN
		SIGNAL SQLSTATE '45100'
			SET MESSAGE_TEXT = 'Administrador não encontrado.';
	END IF;
    
    /* delete principal */
    PREPARE stmt
		FROM 'DELETE FROM fightclub.ADMINISTRADOR
			WHERE login=?';
    SET @id = adminLogin;
    
    EXECUTE stmt USING @id;
    
    DEALLOCATE PREPARE stmt;
    
    COMMIT;
    
END $$

DELIMITER ;

/* Insert Admin */
INSERT INTO fightclub.ADMINISTRADOR VALUES ('admin', 'admin');

COMMIT;
